클래스: 정보를 쉽세 관리하기 위해 만드는 것
 -멤버변수: 정보
 -멤버메소드: 기능
 -생성자: 정보 초기화

클래스 만드는 과정
 멤버변수 ->생성자, 멤버메소드

한국인 클래스
 멤버변수: 이름, 주민등록번호, 주소 등

접근제한자
 -public:      본인 클래스 + 같은 패키지 + 자식 클래스 + 다른 패키지
 -protected: 본인 클래스 + 같은 패키지 + 자식 클래스
 -(default):   본인 클래스 + 같은 패키지
 -private:	    본인 클래스

생성자
 -멤버변수를 초기화: 일반 변수인 경우 초기값을 설정하고, 참조 변수인 경우 객체를 생성
 -생성자의 이름은 클래스명과 같다
 -리턴타입 없음: public 클래스명(){}
 -객체를 생성할 때 원하는 생성자를 호출됨 그 이외에 임의로 호출할 수 없음 point pt = new point();     pt.point//불가능
 -없는 경우 기본 생성자가 만들어짐
 -여러개 있을 수 있음 = 생성자 오버로딩: 매개변수의 종류가 다른 경우 만들 수 있음
 -메개변수의 타입이나 갯수가 다른 경우 사용 가능

-복사 생성자
public 클래스명(클래스명 객체명){}


this 객체
 -클래스안에서만 사용(멤버 메소드, 생성자에서 사용 가능)
 -객체인데 나를 의미
 -매개변수의 이름과 멤버변수의 이름이 같은 경우 필수로 사용
 -this(): 해당 클래스의 생성자, 생성자안에서 첫줄에 와야한다.

오버로딩
 -같은 이름의 메소드/생성자가 여러개인 경우
 -매개변수가 다른 경우에 가능
  -매개변수의 개수가 다른경우
  -매개변수의 개수가 같지만 타입이 다른 경우
 -생성자 오버로딩
 -메소드 오버로딩

메소드의 매개변수 개수를 모를 때 
1. 배열
2. ...

일반변수 		Vs			 참조변수
기본타입     				 기본타입x
값저장	    				 주소저장


멤버변수			Vs		 지역변수
해당 클래스 안 전체			 변수가 선언된 위치에서 포함된 범위



객체 멤버 변수			    Vs	 클래스 멤버 변수(정적 멤버 변수, static이 붙은)
멤버변수를 호출할 때 객체이름으로 호출	 멤버변수를 호출할 때 클래스 이름을 호출
객체명.멤버변수명				 클래스명.멤버변수명(객체명.멤버변수명)
static 없음				 static 있음
객체당 하나씩 존재				 클래스당 하나(모든 객체가 공유)



객체 멤버 메소드				 클래스 멤버 메소드
static 없음				 static 있음
객체.메소드명() 으로 호출			 클래스.메소드명으로 호출(Math.random())
각 개체마다 메소드를 가지고 있음		 하나의 클래스가 메소드를 가지고 있음



클래스 멤버 변수/메소드와 객체 멤버 변수/메소드의 사용 시 유의 사항
 -클래스 멤버 변수/메소드는 객체 메소드에서 사용 가능
 -클래스 멤버 변수는 클래스 메소드에서 사용 가능
 -객체 멤버 변수/메소드는 클래스 메소드에서 사용 불가능
 -객체 멤버 변수는 객체 메소드에서 사용 가능


클래스 변수/ 메소드는 클래스가 메모리에 올라갈 때 선언
객체 변수/메소드는 객체가 실행될 때 선언

final: 변경이 불가능
 -변수: 상수
 -생성자에서 final 변수를 한 번 초기화할 수 있다. 단, 한 번 초기화한 후에는 변경할 수 없다. 
 -메소드: 메소드 오버라이딩이 불가능
 -클래스: 상속 불가능(예: String)

